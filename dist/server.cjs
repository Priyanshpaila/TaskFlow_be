(()=>{var s={37:s=>{"use strict";s.exports=require("mongoose")},67:(s,e,t)=>{const a=t(252).Router(),{updateUserStatus:n,getAllUsers:i,updateUserProfile:o}=t(244),{protect:r,adminOnly:d}=t(289);a.patch("/status",r,n),a.patch("/me/update",r,o),a.get("/",r,d,i),s.exports=a},136:(s,e,t)=>{const a=t(37);s.exports=async()=>{try{await a.connect(process.env.MONGO_URI),console.log("MongoDB connected")}catch(s){console.error(s.message),process.exit(1)}}},244:(s,e,t)=>{const a=t(596),n=t(729);e.updateUserStatus=async(s,e)=>{try{const{status:t}=s.body;if(!["active","inactive","dnd","away"].includes(t))return e.status(400).json({message:"Invalid status value"});const n=await a.findById(s.user._id);n.status=t,await n.save(),e.json({message:"Status updated",status:n.status})}catch(s){e.status(500).json({message:s.message})}},e.getAllUsers=async(s,e)=>{try{const t=await a.findById(s.user._id);if("admin"!==t.role)return e.status(403).json({message:"Access denied: Not an admin"});const n=await a.find({division:t.division}).select("username email status role division");e.json(n)}catch(s){e.status(500).json({message:s.message})}},e.updateUserProfile=async(s,e)=>{try{const t=await a.findById(s.user._id);if(!t)return e.status(404).json({message:"User not found"});const{username:i,email:o,currentPassword:r,newPassword:d}=s.body;if(i&&(t.username=i),o&&(t.email=o),r&&d){if(!await n.compare(r,t.password))return e.status(400).json({message:"Current password is incorrect"});t.password=d}await t.save(),e.json({message:"Profile updated successfully",user:{id:t._id,username:t.username,email:t.email,role:t.role,division:t.division,status:t.status}})}catch(s){e.status(500).json({message:s.message})}}},252:s=>{"use strict";s.exports=require("express")},258:(s,e,t)=>{const a=t(252),{registerUser:n,loginUser:i,getProfile:o}=t(617),{protect:r,adminOnly:d}=t(289),u=a.Router();u.post("/signup",n),u.post("/login",i),u.get("/me",r,o),u.get("/admin",r,d,((s,e)=>e.send("Admin content"))),s.exports=u},289:(s,e,t)=>{const a=t(829),n=t(596);e.protect=async(s,e,t)=>{const i=s.headers.authorization?.split(" ")[1];if(!i)return e.status(401).json({message:"Not authorized, no token"});try{const e=a.verify(i,process.env.JWT_SECRET);s.user=await n.findById(e.id).select("-password"),t()}catch(s){e.status(401).json({message:"Invalid token"})}},e.adminOnly=(s,e,t)=>{s.user&&"admin"===s.user.role?t():e.status(403).json({message:"Admin access required"})}},424:(s,e,t)=>{const a=t(37),n=new a.Schema({taskId:{type:a.Schema.Types.ObjectId,ref:"Task",required:!0},commentedBy:{type:a.Schema.Types.ObjectId,ref:"User",required:!0},text:{type:String,required:!0}},{timestamps:!0});s.exports=a.model("Comment",n)},461:s=>{"use strict";s.exports=require("multer")},474:(s,e,t)=>{const a=t(424);e.addComment=async(s,e)=>{try{const{taskId:t,text:n}=s.body,i=await a.create({taskId:t,text:n,commentedBy:s.user._id});e.status(201).json(i)}catch(s){e.status(500).json({message:s.message})}},e.getCommentsForTask=async(s,e)=>{try{const t=s.params.taskId,n=await a.find({taskId:t}).populate("commentedBy","username").sort({createdAt:-1});e.json(n)}catch(s){e.status(500).json({message:s.message})}}},525:s=>{"use strict";s.exports=require("helmet")},577:s=>{"use strict";s.exports=require("cors")},596:(s,e,t)=>{const a=t(37),n=t(729),i=new a.Schema({username:{type:String,required:!0},email:{type:String,required:!0,unique:!0},password:{type:String,required:!0},role:{type:String,default:"user",enum:["user","admin"]},status:{type:String,enum:["active","inactive","dnd","away"],default:"active"},division:{type:String,required:!0}});i.pre("save",(async function(s){if(!this.isModified("password"))return s();this.password=await n.hash(this.password,10),s()})),i.methods.matchPassword=function(s){return n.compare(s,this.password)},s.exports=a.model("User",i)},617:(s,e,t)=>{const a=t(596),n=t(967);e.registerUser=async(s,e)=>{const{username:t,email:i,password:o,confirmPassword:r,division:d}=s.body;if(!(t&&i&&o&&r&&d))return e.status(400).json({message:"All fields are required"});if(o!==r)return e.status(400).json({message:"Passwords do not match"});if(await a.findOne({email:i}))return e.status(400).json({message:"User already exists"});const u=await a.create({username:t,email:i,password:o,division:d});e.status(201).json({id:u._id,username:u.username,email:u.email,division:u.division,role:u.role,token:n(u._id)})},e.loginUser=async(s,e)=>{const{email:t,password:i}=s.body,o=await a.findOne({email:t});o&&await o.matchPassword(i)?e.json({id:o._id,username:o.username,email:o.email,role:o.role,division:o.division,token:n(o._id)}):e.status(401).json({message:"Invalid credentials"})},e.getProfile=async(s,e)=>{const t=await a.findById(s.user.id).select("-password");if(!t)return e.status(404).json({message:"User not found"});e.json(t)}},698:(s,e,t)=>{const a=t(461),n=t(928),i=a.diskStorage({destination(s,e,t){t(null,"uploads/")},filename(s,e,t){t(null,`${Date.now()}-${e.originalname}`)}}),o=a({storage:i,fileFilter(s,e,t){const a=n.extname(e.originalname).toLowerCase();[".jpg",".jpeg",".png",".pdf",".docx"].includes(a)?t(null,!0):t(new Error("Only images and documents are allowed"))}});s.exports=o},729:s=>{"use strict";s.exports=require("bcryptjs")},733:(s,e,t)=>{const a=t(252).Router(),{createTask:n,getTasksForUser:i,getAllTasks:o,updateTaskStatus:r,getDashboardStats:d,uploadAttachment:u}=t(882),{protect:c,adminOnly:m}=t(289),p=t(698);a.post("/",c,m,n),a.get("/",c,m,o),a.get("/my",c,i),a.patch("/:id",c,r),a.get("/stats/dashboard",c,m,d),a.post("/:id/upload",c,p.single("file"),u),s.exports=a},743:(s,e,t)=>{const a=t(252).Router(),{addComment:n,getCommentsForTask:i}=t(474),{protect:o}=t(289);a.post("/",o,n),a.get("/:taskId",o,i),s.exports=a},818:s=>{"use strict";s.exports=require("dotenv")},829:s=>{"use strict";s.exports=require("jsonwebtoken")},882:(s,e,t)=>{const a=t(930),n=t(596);e.createTask=async(s,e)=>{try{const{title:t,description:i,assignedTo:o,priority:r,dueDate:d}=s.body,u=await n.findById(s.user._id);if(!u||"admin"!==u.role)return e.status(403).json({message:"Only admins can create tasks"});if((await n.find({_id:{$in:o}})).filter((s=>s.division!==u.division)).length>0)return e.status(400).json({message:"Some users are not in your division"});const c=await a.create({title:t,description:i,assignedTo:o,priority:r,dueDate:d,createdBy:u._id,division:u.division});e.status(201).json(c)}catch(s){console.error("ERROR:",s),e.status(500).json({message:s.message})}},e.getTasksForUser=async(s,e)=>{try{const t=await a.find({assignedTo:s.user._id}).sort({dueDate:1});e.json(t)}catch(s){e.status(500).json({message:s.message})}},e.getAllTasks=async(s,e)=>{try{const t=await n.findById(s.user._id);if(!t||"admin"!==t.role)return e.status(403).json({message:"Only admins can view all tasks"});const i=await a.find({division:t.division}).populate("assignedTo","username email status").populate("createdBy","username");e.json(i)}catch(s){e.status(500).json({message:s.message})}},e.updateTaskStatus=async(s,e)=>{try{const{status:t}=s.body,n=await a.findById(s.params.id);if(!n)return e.status(404).json({message:"Task not found"});if(!n.assignedTo.includes(s.user._id))return e.status(403).json({message:"Not authorized to update this task"});n.status=t,await n.save(),e.json(n)}catch(s){e.status(500).json({message:s.message})}},e.getDashboardStats=async(s,e)=>{try{const t=await n.findById(s.user._id);if(!t||"admin"!==t.role)return e.status(403).json({message:"Only admins can access stats"});const i=new Date,o={division:t.division},[r,d,u,c,m,p]=await Promise.all([a.countDocuments(o),a.countDocuments({...o,status:"pending"}),a.countDocuments({...o,status:"in_progress"}),a.countDocuments({...o,status:"completed"}),a.countDocuments({...o,dueDate:{$lt:i},status:{$ne:"completed"}}),n.countDocuments({division:t.division,status:"active"})]);e.json({totalTasks:r,pendingTasks:d,inProgressTasks:u,completedTasks:c,overdueTasks:m,activeUsers:p})}catch(s){e.status(500).json({message:s.message})}},e.uploadAttachment=async(s,e)=>{try{const t=s.params.id,n=s.file;if(!n)return e.status(400).json({message:"No file uploaded"});const i=await a.findById(t);if(!i)return e.status(404).json({message:"Task not found"});i.attachments||(i.attachments=[]),i.attachments.push(n.filename),await i.save(),e.status(200).json({message:"File uploaded",filename:n.filename})}catch(s){e.status(500).json({message:s.message})}}},928:s=>{"use strict";s.exports=require("path")},930:(s,e,t)=>{const a=t(37),n=new a.Schema({title:{type:String,required:!0},description:String,assignedTo:[{type:a.Schema.Types.ObjectId,ref:"User"}],priority:{type:String,enum:["urgent","high","medium","low","easy"],default:"medium"},dueDate:Date,status:{type:String,enum:["pending","in_progress","completed"],default:"pending"},createdBy:{type:a.Schema.Types.ObjectId,ref:"User"},attachments:String,division:{type:String,required:!0}},{timestamps:!0});s.exports=a.model("Task",n)},967:(s,e,t)=>{const a=t(829);s.exports=s=>a.sign({id:s},process.env.JWT_SECRET,{expiresIn:process.env.JWT_EXPIRE})}},e={};function t(a){var n=e[a];if(void 0!==n)return n.exports;var i=e[a]={exports:{}};return s[a](i,i.exports,t),i.exports}const a=t(252),n=t(818),i=t(136),o=t(258),r=t(525),d=t(577),u=t(733),c=t(67),m=t(743);n.config(),i();const p=a();p.use(r()),p.use(d()),p.use(a.json()),p.use("/api/auth",o),p.use("/api/tasks",u),p.use("/api/users",c),p.use("/api/comments",m),p.listen(process.env.PORT,(()=>{console.log(`Server running on port ${process.env.PORT}`)})),module.exports={}})();