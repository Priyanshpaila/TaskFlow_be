(()=>{var s={37:s=>{"use strict";s.exports=require("mongoose")},67:(s,e,t)=>{const a=t(252).Router(),{updateUserStatus:n,getAllUsers:o}=t(244),{protect:r,adminOnly:i}=t(289);a.patch("/status",r,n),a.get("/",r,i,o),s.exports=a},136:(s,e,t)=>{const a=t(37);s.exports=async()=>{try{await a.connect(process.env.MONGO_URI),console.log("MongoDB connected")}catch(s){console.error(s.message),process.exit(1)}}},244:(s,e,t)=>{const a=t(596);e.updateUserStatus=async(s,e)=>{try{const{status:t}=s.body;if(!["active","inactive","dnd","away"].includes(t))return e.status(400).json({message:"Invalid status value"});const n=await a.findById(s.user._id);n.status=t,await n.save(),e.json({message:"Status updated",status:n.status})}catch(s){e.status(500).json({message:s.message})}},e.getAllUsers=async(s,e)=>{try{const s=await a.find().select("username email status role");e.json(s)}catch(s){e.status(500).json({message:s.message})}}},252:s=>{"use strict";s.exports=require("express")},258:(s,e,t)=>{const a=t(252),{registerUser:n,loginUser:o,getProfile:r}=t(617),{protect:i,adminOnly:u}=t(289),c=a.Router();c.post("/signup",n),c.post("/login",o),c.get("/me",i,r),c.get("/admin",i,u,((s,e)=>e.send("Admin content"))),s.exports=c},289:(s,e,t)=>{const a=t(829),n=t(596);e.protect=async(s,e,t)=>{const o=s.headers.authorization?.split(" ")[1];if(!o)return e.status(401).json({message:"Not authorized, no token"});try{const e=a.verify(o,process.env.JWT_SECRET);s.user=await n.findById(e.id).select("-password"),t()}catch(s){e.status(401).json({message:"Invalid token"})}},e.adminOnly=(s,e,t)=>{s.user&&"admin"===s.user.role?t():e.status(403).json({message:"Admin access required"})}},424:(s,e,t)=>{const a=t(37),n=new a.Schema({taskId:{type:a.Schema.Types.ObjectId,ref:"Task",required:!0},commentedBy:{type:a.Schema.Types.ObjectId,ref:"User",required:!0},text:{type:String,required:!0}},{timestamps:!0});s.exports=a.model("Comment",n)},461:s=>{"use strict";s.exports=require("multer")},474:(s,e,t)=>{const a=t(424);e.addComment=async(s,e)=>{try{const{taskId:t,text:n}=s.body,o=await a.create({taskId:t,text:n,commentedBy:s.user._id});e.status(201).json(o)}catch(s){e.status(500).json({message:s.message})}},e.getCommentsForTask=async(s,e)=>{try{const t=s.params.taskId,n=await a.find({taskId:t}).populate("commentedBy","username").sort({createdAt:-1});e.json(n)}catch(s){e.status(500).json({message:s.message})}}},525:s=>{"use strict";s.exports=require("helmet")},577:s=>{"use strict";s.exports=require("cors")},596:(s,e,t)=>{const a=t(37),n=t(729),o=new a.Schema({username:{type:String,required:!0},email:{type:String,required:!0,unique:!0},password:{type:String,required:!0},role:{type:String,default:"user",enum:["user","admin"]},status:{type:String,enum:["active","inactive","dnd","away"],default:"active"}});o.pre("save",(async function(s){if(!this.isModified("password"))return s();this.password=await n.hash(this.password,10),s()})),o.methods.matchPassword=function(s){return n.compare(s,this.password)},s.exports=a.model("User",o)},617:(s,e,t)=>{const a=t(596),n=t(967);e.registerUser=async(s,e)=>{const{username:t,email:o,password:r,confirmPassword:i}=s.body;if(r!==i)return e.status(400).json({message:"Passwords do not match"});if(await a.findOne({email:o}))return e.status(400).json({message:"User already exists"});const u=await a.create({username:t,email:o,password:r});e.status(201).json({id:u._id,username:u.username,email:u.email,token:n(u._id)})},e.loginUser=async(s,e)=>{const{email:t,password:o}=s.body,r=await a.findOne({email:t});r&&await r.matchPassword(o)?e.json({id:r._id,username:r.username,email:r.email,role:r.role,token:n(r._id)}):e.status(401).json({message:"Invalid credentials"})},e.getProfile=async(s,e)=>{const t=await a.findById(s.user.id).select("-password");e.json(t)}},698:(s,e,t)=>{const a=t(461),n=t(928),o=a.diskStorage({destination(s,e,t){t(null,"uploads/")},filename(s,e,t){t(null,`${Date.now()}-${e.originalname}`)}}),r=a({storage:o,fileFilter(s,e,t){const a=n.extname(e.originalname).toLowerCase();[".jpg",".jpeg",".png",".pdf",".docx"].includes(a)?t(null,!0):t(new Error("Only images and documents are allowed"))}});s.exports=r},729:s=>{"use strict";s.exports=require("bcryptjs")},733:(s,e,t)=>{const a=t(252).Router(),{createTask:n,getTasksForUser:o,getAllTasks:r,updateTaskStatus:i,getDashboardStats:u,uploadAttachment:c}=t(882),{protect:d,adminOnly:m}=t(289),p=t(698);a.post("/",d,m,n),a.get("/",d,m,r),a.get("/my",d,o),a.patch("/:id",d,i),a.get("/stats/dashboard",d,m,u),a.post("/:id/upload",d,p.single("file"),c),s.exports=a},743:(s,e,t)=>{const a=t(252).Router(),{addComment:n,getCommentsForTask:o}=t(474),{protect:r}=t(289);a.post("/",r,n),a.get("/:taskId",r,o),s.exports=a},818:s=>{"use strict";s.exports=require("dotenv")},829:s=>{"use strict";s.exports=require("jsonwebtoken")},882:(s,e,t)=>{const a=t(930),n=t(596);e.createTask=async(s,e)=>{try{const{title:t,description:n,assignedTo:o,priority:r,dueDate:i}=s.body,u=await a.create({title:t,description:n,assignedTo:o,priority:r,dueDate:i,createdBy:s.user._id});e.status(201).json(u)}catch(s){console.error("ERROR:",s),e.status(500).json({message:s.message})}},e.getTasksForUser=async(s,e)=>{try{const t=await a.find({assignedTo:s.user._id}).sort({dueDate:1});e.json(t)}catch(s){e.status(500).json({message:s.message})}},e.getAllTasks=async(s,e)=>{try{const s=await a.find().populate("assignedTo","username email status").populate("createdBy","username");e.json(s)}catch(s){e.status(500).json({message:s.message})}},e.updateTaskStatus=async(s,e)=>{try{const{status:t}=s.body,n=await a.findById(s.params.id);if(!n)return e.status(404).json({message:"Task not found"});if(!n.assignedTo.includes(s.user._id))return e.status(403).json({message:"Not authorized to update this task"});n.status=t,await n.save(),e.json(n)}catch(s){e.status(500).json({message:s.message})}},e.getDashboardStats=async(s,e)=>{try{const s=new Date,[t,o,r,i,u,c]=await Promise.all([a.countDocuments(),a.countDocuments({status:"pending"}),a.countDocuments({status:"in_progress"}),a.countDocuments({status:"completed"}),a.countDocuments({dueDate:{$lt:s},status:{$ne:"completed"}}),n.countDocuments({status:"active"})]);e.json({totalTasks:t,pendingTasks:o,inProgressTasks:r,completedTasks:i,overdueTasks:u,activeUsers:c})}catch(s){e.status(500).json({message:s.message})}},e.uploadAttachment=async(s,e)=>{try{const t=s.params.id,n=s.file;if(!n)return e.status(400).json({message:"No file uploaded"});const o=await a.findById(t);if(!o)return e.status(404).json({message:"Task not found"});o.attachments||(o.attachments=[]),o.attachments.push(n.filename),await o.save(),e.status(200).json({message:"File uploaded",filename:n.filename})}catch(s){e.status(500).json({message:s.message})}}},928:s=>{"use strict";s.exports=require("path")},930:(s,e,t)=>{const a=t(37),n=new a.Schema({title:{type:String,required:!0},description:{type:String},assignedTo:[{type:a.Schema.Types.ObjectId,ref:"User"}],priority:{type:String,enum:["urgent","high","medium","low","easy"],default:"medium"},dueDate:{type:Date},status:{type:String,enum:["pending","in_progress","completed"],default:"pending"},createdBy:{type:a.Schema.Types.ObjectId,ref:"User"},attachments:{type:String}},{timestamps:!0});s.exports=a.model("Task",n)},967:(s,e,t)=>{const a=t(829);s.exports=s=>a.sign({id:s},process.env.JWT_SECRET,{expiresIn:process.env.JWT_EXPIRE})}},e={};function t(a){var n=e[a];if(void 0!==n)return n.exports;var o=e[a]={exports:{}};return s[a](o,o.exports,t),o.exports}const a=t(252),n=t(818),o=t(136),r=t(258),i=t(525),u=t(577),c=t(733),d=t(67),m=t(743);n.config(),o();const p=a();p.use(i()),p.use(u()),p.use(a.json()),p.use("/api/auth",r),p.use("/api/tasks",c),p.use("/api/users",d),p.use("/api/comments",m),p.listen(process.env.PORT,(()=>{console.log(`Server running on port ${process.env.PORT}`)})),module.exports={}})();